// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OctopusNotify.App.Tests.Settings
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SettingsViewModelFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SettingsViewModel.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Settings View Model", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Settings View Model")))
            {
                OctopusNotify.App.Tests.Settings.SettingsViewModelFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should trigger property changed event for ServerUrl")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings View Model")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotifyChange")]
        public virtual void ShouldTriggerPropertyChangedEventForServerUrl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should trigger property changed event for ServerUrl", new string[] {
                        "NotifyChange"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("a SettingsViewModel instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("the ServerURL property is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("the property changed event at index \'0\' fired with name \'CanTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And("the property changed event at index \'1\' fired with name \'ServerUrl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("the number of fired events will be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should trigger property changed event for IsValid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings View Model")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotifyChange")]
        public virtual void ShouldTriggerPropertyChangedEventForIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should trigger property changed event for IsValid", new string[] {
                        "NotifyChange"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("a SettingsViewModel instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("the IsValid property is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the property changed event at index \'0\' fired with name \'IsValid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("the number of fired events will be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should trigger property changed event for RunOnStartup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings View Model")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotifyChange")]
        public virtual void ShouldTriggerPropertyChangedEventForRunOnStartup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should trigger property changed event for RunOnStartup", new string[] {
                        "NotifyChange"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("a SettingsViewModel instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("the RunOnStartup property is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("the property changed event at index \'0\' fired with name \'RunOnStartup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("the number of fired events will be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should trigger property changed event for AlertOnFailedBuild")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings View Model")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotifyChange")]
        public virtual void ShouldTriggerPropertyChangedEventForAlertOnFailedBuild()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should trigger property changed event for AlertOnFailedBuild", new string[] {
                        "NotifyChange"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("a SettingsViewModel instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("the AlertOnFailedBuild property is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("the property changed event at index \'0\' fired with name \'AlertOnFailedBuild\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.And("the property changed event at index \'1\' fired with name \'AlertOnNewFailedBuild\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("the number of fired events will be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should trigger property changed event for AlertOnNewFailedBuild")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings View Model")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotifyChange")]
        public virtual void ShouldTriggerPropertyChangedEventForAlertOnNewFailedBuild()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should trigger property changed event for AlertOnNewFailedBuild", new string[] {
                        "NotifyChange"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("a SettingsViewModel instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.When("the AlertOnNewFailedBuild property is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the property changed event at index \'0\' fired with name \'AlertOnNewFailedBuild\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.And("the number of fired events will be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should trigger property changed event for AlertOnFixedBuild")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings View Model")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotifyChange")]
        public virtual void ShouldTriggerPropertyChangedEventForAlertOnFixedBuild()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should trigger property changed event for AlertOnFixedBuild", new string[] {
                        "NotifyChange"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("a SettingsViewModel instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.When("the AlertOnFixedBuild property is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("the property changed event at index \'0\' fired with name \'AlertOnFixedBuild\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.And("the number of fired events will be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should trigger property changed event for AlertOnSuccessfulBuild")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings View Model")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotifyChange")]
        public virtual void ShouldTriggerPropertyChangedEventForAlertOnSuccessfulBuild()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should trigger property changed event for AlertOnSuccessfulBuild", new string[] {
                        "NotifyChange"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("a SettingsViewModel instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.When("the AlertOnSuccessfulBuild property is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("the property changed event at index \'0\' fired with name \'AlertOnSuccessfulBuild\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.Then("the property changed event at index \'1\' fired with name \'AlertOnFixedBuild\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And("the number of fired events will be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Should trigger property changed event for IntervalTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings View Model")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotifyChange")]
        public virtual void ShouldTriggerPropertyChangedEventForIntervalTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should trigger property changed event for IntervalTime", new string[] {
                        "NotifyChange"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("a SettingsViewModel instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.When("the IntervalTime property is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then("the property changed event at index \'0\' fired with name \'IntervalTime\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
 testRunner.And("the number of fired events will be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
