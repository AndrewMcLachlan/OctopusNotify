<Window x:Class="OctopusNotify.App.Views.SettingsWindow2"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:OctopusNotify.App"
        xmlns:vm="clr-namespace:OctopusNotify.App.ViewModels"
        xmlns:vr="clr-namespace:OctopusNotify.App.ValidationRules"
        xmlns:conv="clr-namespace:OctopusNotify.App.ValueConverters"
        mc:Ignorable="d"
        Title="Settings" Height="500" Width="809" ResizeMode="CanResizeWithGrip" ShowInTaskbar="True" WindowStartupLocation="CenterScreen" Padding="0" Margin="0"
        Closing="Window_Closing">
    <Window.Resources>
        <Style x:Key="Header" TargetType="TextBlock">
            <Setter Property="Typography.Capitals" Value="Normal" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="Margin" Value="0,0,0,5" />
        </Style>
        <Style x:Key="Subheading" TargetType="TextBlock">
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Margin" Value="0,0,0,5" />
        </Style>
        <Style x:Key="TabContentPanel" TargetType="Panel">
            <Setter Property="Margin" Value="15,10,15,0" />
        </Style>
        <Style x:Key="TabItemHeader" TargetType="StackPanel">
            <Setter Property="Width" Value="100" />
            <Setter Property="Orientation" Value="Horizontal" />
            <Setter Property="HorizontalAlignment" Value="Left" />
        </Style>
        <Style TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
            <Setter Property="Margin" Value="2,5,0,5" />
        </Style>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Save" CanExecute="CommandBinding_CanExecute" Executed="SaveCommandBinding_Executed" />
        <CommandBinding Command="local:AppCommands.Test" CanExecute="Test_CanExecute" Executed="TestCommandBinding_Executed" />
    </Window.CommandBindings>
    <Window.DataContext>
        <vm:SettingsViewModel />
    </Window.DataContext>
    <DockPanel VerticalAlignment="Stretch" Margin="0" Grid.ColumnSpan="2">
        <TabControl TabStripPlacement="Left" Margin="0,0,0,0" DockPanel.Dock="Bottom" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="1,1,0,0">
            <TabControl.Resources>
                <Style TargetType="{x:Type Grid}">
                    <Setter Property="Background" Value="#FFF0F0F0"/>
                </Style>
                <Style TargetType="TabItem">
                    <Setter Property="Margin" Value="-2,-2,0,0" />
                    <Setter Property="Padding" Value="15,10,15,10" />
                    <Setter Property="BorderThickness" Value="0,1,1,0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                    <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="#FFF0F0F0" Margin="0">
                                        <Border x:Name="innerBorder" BorderBrush="#FFACACAC" BorderThickness="1,1,1,0" Background="White" Margin="-1" Opacity="0"/>
                                    </Border>
                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" TargetName="mainBorder">
                                            <Setter.Value>
                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                    <GradientStop Color="#FFECF4FC" Offset="0"/>
                                                    <GradientStop Color="#FFDCECFC" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="BorderBrush" TargetName="mainBorder" Value="#FF7EB4EA"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,0,1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,0,1"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                        <Setter Property="Background" TargetName="mainBorder" Value="#FFF0F0F0"/>
                                        <Setter Property="BorderBrush" TargetName="mainBorder" Value="#FFD9D9D9"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,0,1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,0,1"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,0,1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,0,1"/>
                                        <Setter Property="BorderBrush" TargetName="mainBorder" Value="#FFD9D9D9" />
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Panel.ZIndex" Value="1"/>
                                        <!--<Setter Property="Margin" Value="-2,-2,0,-2"/>-->
                                        <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,0,1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,0,1"/>
                                        <Setter Property="BorderBrush" TargetName="mainBorder" Value="#FF000000" />
                                    </MultiDataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.Resources>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Style="{StaticResource TabItemHeader}">
                        <Image Name="header" Source="../images/Server.png" Height="16" Margin="0,0,7,0" />
                        <TextBlock>Server</TextBlock>
                    </StackPanel>
                </TabItem.Header>
                <StackPanel Style="{StaticResource TabContentPanel}">
                    <TextBlock Style="{StaticResource Header}">Server</TextBlock>
                    <Separator />
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,10">
                        <Label x:Name="ServerUrlLabel" Content="Server URL:" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75"/>
                        <TextBox x:Name="ServerUrlText" Padding="0,3" VerticalContentAlignment="Center" TextWrapping="NoWrap"  VerticalAlignment="Top" Validation.Error="Validation_Error" Width="221" MaxWidth="221" Validation.ErrorTemplate="{x:Null}">
                            <Binding Path="ServerUrl"
                         Mode="TwoWay"
                         UpdateSourceTrigger="PropertyChanged"
                         ValidatesOnNotifyDataErrors="True"
                         ValidatesOnDataErrors="True"
                         NotifyOnValidationError="True">
                                <Binding.ValidationRules>
                                    <vr:RequiredValidationRule />
                                    <vr:UrlValidationRule />
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox>
                    </StackPanel>
                    <TextBlock Style="{StaticResource Subheading}">Login</TextBlock>
                    <WrapPanel Orientation="Horizontal">
                        <StackPanel Margin="0,10,10,10">
                            <RadioButton Margin="0,5" IsChecked="{Binding !(UseApiKey)}">Username and password</RadioButton>
                            <RadioButton Margin="0,5" IsChecked="{Binding UseApiKey}">API Key</RadioButton>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0,10">
                            <Label x:Name="APiKeyLabel" Content="API Key:"  Width="75" />
                            <TextBox x:Name="ApiKeyText" IsEnabled="{Binding CanSetApiKey}" Padding="0,3" VerticalAlignment="Top" TextWrapping="NoWrap" Validation.Error="Validation_Error" TextChanged="ApiKeyText_TextChanged" GotFocus="ApiKeyText_GotFocus" LostFocus="ApiKeyText_LostFocus" KeyUp="ApiKeyText_KeyUp" Width="221" MaxWidth="221" Text="{Binding Path=InitialApiKey, Mode=OneWay}">
                            </TextBox>
                            <TextBlock x:Name="textBlock" TextWrapping="Wrap"  Margin="10,0,0,0">
                            <Hyperlink NavigateUri="{Binding ApiKeyUri}" RequestNavigate="Hyperlink_RequestNavigate">
                                How do I get an API key?
                            </Hyperlink>
                            </TextBlock>
                        </StackPanel>
                    </WrapPanel>
                    <StackPanel Orientation="Horizontal">
                        <Button x:Name="TestButton" Content="Test" HorizontalAlignment="Right" VerticalAlignment="Top" Width="75" IsDefault="True" Command="local:AppCommands.Test" />
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Style="{StaticResource TabItemHeader}">
                        <Image Source="../images/Notification.png" Height="16" Margin="0,0,7,0" />
                        <TextBlock>Notifications</TextBlock>
                    </StackPanel>
                </TabItem.Header>
                <StackPanel Style="{StaticResource TabContentPanel}">
                    <TextBlock Style="{StaticResource Header}">Notifications</TextBlock>
                    <Separator />
                    <WrapPanel Margin="5,5,10,0" Grid.Column="0" Grid.Row="1">
                        <StackPanel Orientation="Vertical" Margin="0,0,50,20">
                            <TextBlock x:Name="FailureLabel" Style="{StaticResource Subheading}" Text="Notify on Failed Build" />
                            <RadioButton Content="All" IsChecked="{Binding AlertOnFailedBuild}" />
                            <RadioButton Content="First failure" IsChecked="{Binding AlertOnNewFailedBuild}" />
                            <RadioButton Content="Never" IsChecked="{Binding DisableFailedBuildAlerts }" />
                            <CheckBox x:Name="AlertOnGuidedFailure" IsChecked="{Binding AlertOnGuidedFailure}" Margin="5,15,0,0" Content="Alert on Guided Failure" />
                        </StackPanel>
                        <StackPanel Orientation="Vertical">
                            <TextBlock x:Name="SuccessLabel" Style="{StaticResource Subheading}" Text="Notify on Successful Build" />
                            <RadioButton Content="All" IsChecked="{Binding AlertOnSuccessfulBuild}" />
                            <RadioButton Content="Build is fixed" IsChecked="{Binding AlertOnFixedBuild}" />
                            <RadioButton Content="Never" IsChecked="{Binding DisableSuccessfulBuildAlerts }" />
                            <CheckBox x:Name="AlertOnManualStep" IsChecked="{Binding AlertOnManualStep}" Margin="5,15,0,0" Content="Alert on Manual Step" />
                        </StackPanel>
                    </WrapPanel>
                    <StackPanel Margin="0,10,0,0">
                        <TextBlock Style="{StaticResource Subheading}">Timers</TextBlock>
                        <StackPanel Orientation="Horizontal" >
                            <Label x:Name="IntervalLabel" Content="Poll Octopus every" />
                            <TextBox x:Name="IntervalTime" Margin="0,1" TextWrapping="NoWrap" VerticalContentAlignment="Center" Width="32" Text="{Binding PollingInterval }" PreviewTextInput="Time_PreviewTextInput" DataObject.Pasting="Time_Pasting">
                            </TextBox>
                            <Label x:Name="IntervalLabel2" Content="seconds" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0,15,0,0">
                            <Label x:Name="BalloonTimeoutLabel" Content="Show notifications for" />
                            <TextBox x:Name="BalloonTimeout" Margin="0,1" TextWrapping="NoWrap" VerticalContentAlignment="Center" Width="32" Text="{Binding BalloonTimeout }" PreviewTextInput="Time_PreviewTextInput" DataObject.Pasting="Time_Pasting">
                            </TextBox>
                            <Label x:Name="BalloonTimeoutLabel2" Content="seconds" />
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Style="{StaticResource TabItemHeader}">
                        <Image Source="../images/Application.png" Height="16" Margin="0,0,7,0" />
                        <TextBlock>Application</TextBlock>
                    </StackPanel>
                </TabItem.Header>
                <StackPanel Style="{StaticResource TabContentPanel}">
                    <TextBlock Style="{StaticResource Header}">Startup</TextBlock>
                    <Separator />
                    <CheckBox x:Name="StartWhenWindowsStarts" Content="Run Octopus Notify on startup" Margin="10,10,10,10" IsChecked="{Binding RunOnStartup}">
                    </CheckBox>
                </StackPanel>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
