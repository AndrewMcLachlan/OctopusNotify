<Window x:Class="OctopusNotify.App.Views.SettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:OctopusNotify.App"
        mc:Ignorable="d"
        xmlns:vm="clr-namespace:OctopusNotify.App.ViewModels"
        xmlns:comm="clr-namespace:OctopusNotify.App.Commands"
        xmlns:vr="clr-namespace:OctopusNotify.App.ValidationRules"
        xmlns:conv="clr-namespace:OctopusNotify.App.ValueConverters"
        Closing="Window_Closing"
        Title="Settings" Height="385.058" Width="675.811" ResizeMode="NoResize" ShowInTaskbar="False" WindowStartupLocation="CenterScreen">
    <Window.DataContext>
        <vm:SettingsViewModel />
    </Window.DataContext>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Save" CanExecute="CommandBinding_CanExecute" Executed="SaveCommandBinding_Executed" />
        <CommandBinding Command="local:AppCommands.Test" CanExecute="Test_CanExecute" Executed="TestCommandBinding_Executed" />
    </Window.CommandBindings>
    <Window.Resources>
        <conv:InvertBooleanConverter x:Key="InvertBoolean" />
    </Window.Resources>

    <StackPanel>
        <StackPanel Orientation="Horizontal">
            <GroupBox Header="Server Settings" Margin="10,10,10,10">
                <StackPanel>
                    <Label x:Name="ServerUrlLabel" Content="Server URL:" HorizontalAlignment="Left" Margin="5,10,0,0" VerticalAlignment="Top"/>
                    <TextBox x:Name="ServerUrlText" Padding="0,3" VerticalContentAlignment="Center" TextWrapping="NoWrap" Margin="10,0,10,0" VerticalAlignment="Top" Validation.Error="Validation_Error" Width="221" MaxWidth="221" Validation.ErrorTemplate="{x:Null}">
                        <Binding Path="ServerUrl"
                         Mode="TwoWay"
                         UpdateSourceTrigger="PropertyChanged"
                         ValidatesOnNotifyDataErrors="True"
                         ValidatesOnDataErrors="True"
                         NotifyOnValidationError="True">
                            <Binding.ValidationRules>
                                <vr:RequiredValidationRule />
                                <vr:UrlValidationRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox>
                    <StackPanel Orientation="Horizontal" Margin="5,10,0,0">
                        <Label x:Name="APiKeyLabel" Content="API Key:"  VerticalAlignment="Top" />
                        <!--<TextBlock x:Name="textBlock2" Margin="5,0,0,0" VerticalAlignment="Center">
                            <Hyperlink NavigateUri="{Binding ApiKeyUri}" RequestNavigate="Hyperlink_RequestNavigate">
                                How do I get an API key?
                            </Hyperlink>
                    </TextBlock>-->
                    </StackPanel>
                    <TextBox x:Name="ApiKeyText" Padding="0,2" VerticalContentAlignment="Center" Margin="10,0,10,0" TextWrapping="NoWrap" VerticalAlignment="Top" Validation.Error="Validation_Error" TextChanged="ApiKeyText_TextChanged" Width="221" MaxWidth="221">
                    </TextBox>
                    <Label x:Name="label" Content="Existing keys are not shown for security reasons" FontSize="11" Margin="0,0,0,0" HorizontalAlignment="Center" />
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,10">
                        <TextBlock x:Name="textBlock" TextWrapping="Wrap" VerticalAlignment="Center" Margin="10,0,0,0">
                            <Hyperlink NavigateUri="{Binding ApiKeyUri}" RequestNavigate="Hyperlink_RequestNavigate">
                                How do I get an API key?
                            </Hyperlink>
                        </TextBlock>
                        <Button x:Name="TestButton" Content="Test" HorizontalAlignment="Right" Margin="15,5,0,0" VerticalAlignment="Top" Width="75" IsDefault="True" Command="local:AppCommands.Test" />
                    </StackPanel>
                </StackPanel>
            </GroupBox>
            <GroupBox Header="Alert Settings" Margin="10,10,10,10" Width="376">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Margin="5,5,10,0" Grid.Column="0">
                        <Label x:Name="FailureLabel" Content="Alert on Failed Build:" Margin="0,0,0,0" />
                        <StackPanel Orientation="Horizontal">
                            <RadioButton Content="All" IsChecked="{Binding AlertOnFailedBuild}" Margin="5,0,0,0" />
                            <RadioButton Content="First failure" IsChecked="{Binding AlertOnNewFailedBuild}" Margin="10,0,0,0" />
                            <RadioButton Content="Never" IsChecked="{Binding DisableFailedBuildAlerts }" Margin="10,0,0,0" />
                        </StackPanel>
                        <Label x:Name="SuccessLabel" Content="Alert on Successful Build:" Margin="0,5,0,0" />
                        <StackPanel Orientation="Horizontal">
                            <RadioButton Content="All" IsChecked="{Binding AlertOnSuccessfulBuild}" Margin="5,0,0,0" />
                            <RadioButton Content="Build is fixed" IsChecked="{Binding AlertOnFixedBuild}" Margin="10,0,0,0" />
                            <RadioButton Content="Never" IsChecked="{Binding DisableSuccessfulBuildAlerts }" Margin="10,0,0,0" />
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Grid.Column="1">
                        <CheckBox x:Name="AlertOnGuidedFailure" IsChecked="{Binding AlertOnGuidedFailure}" Margin="10,32,0,0" Content="Alert on Guided Failure" />
                        <CheckBox x:Name="AlertOnManualStep" IsChecked="{Binding AlertOnManualStep}" Margin="10,30,0,0" Content="Alert on Manual Step" />
                    </StackPanel>
                    <StackPanel Margin="0,10,0,0" Grid.Row="1" Grid.ColumnSpan="2">
                        <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                            <Label x:Name="IntervalLabel" Content="Poll Octopus every" />
                            <TextBox x:Name="IntervalTime" Margin="0,1" TextWrapping="NoWrap" VerticalContentAlignment="Center" Width="32" Text="{Binding PollingInterval }" PreviewTextInput="Time_PreviewTextInput" DataObject.Pasting="Time_Pasting">
                            </TextBox>
                            <Label x:Name="IntervalLabel2" Content="seconds" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0,15,0,0">
                            <Label x:Name="BalloonTimeoutLabel" Content="Show notifications for" />
                            <TextBox x:Name="BalloonTimeout" Margin="0,1" TextWrapping="NoWrap" VerticalContentAlignment="Center" Width="32" Text="{Binding BalloonTimeout }" PreviewTextInput="Time_PreviewTextInput" DataObject.Pasting="Time_Pasting">
                            </TextBox>
                            <Label x:Name="BalloonTimeoutLabel2" Content="seconds" />
                        </StackPanel>
                    </StackPanel>
                </Grid>
            </GroupBox>
        </StackPanel>
        <GroupBox Header="Application Settings" Margin="10,0,10,10">
            <CheckBox x:Name="StartWhenWindowsStarts" Content="Run Octopus Notify on startup" Margin="10,10,10,10" IsChecked="{Binding RunOnStartup}">
            </CheckBox>
        </GroupBox>
        <StackPanel Orientation="Horizontal" FlowDirection="RightToLeft">
            <Button x:Name="OKButton" Content="OK" HorizontalAlignment="Right" Margin="10,10,10,0" VerticalAlignment="Top" Width="75" IsDefault="True" Command="Save" />
        </StackPanel>
    </StackPanel>
</Window>
